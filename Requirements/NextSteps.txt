Касательно дальнейших потенциальных улучшений задания по сериализации:

1) Добавть IoC контейнер, в принципе любой. Я использую Autofac (https://docs.autofac.org/en/latest/getting-started/index.html) он один из наиболее универсальных и продвинутых, так что если будете использовать его, то смогу поделиться опытом. Касательно прочих, на начальном уровне они все в принципе более менее одинаковые, а на продвинутом, отличия будут уже серьезные. Сам по себе IoC контейнер не является архитектурой как таковой, это ее элемент. В данном случае IoC контейнер это просто удобный инструмент для организации кода согласно принципам SOLID. В настоящее время архитектура строится на основе других, высокоуровневых вреймворков, а в конкретном задании, в моей реализации, их нет.

2) Можно попрактиковаться в применении других видов и библиотек сериализации BinaryFormatter, Protobuf, JSON + Zip, Csv, XML, XML + Zip, LINQ to XML, вариантов множество. Все вышеперечисленные способы сериализации имеют готовые к использованию Nuget пакеты, которые часто применяются в различных ситуациях и с ними было бы хорошо познакомиться. Под каждый тип сериализации можно создать свой сервис, который будет данный тип сериализации обслуживать, и по практиковать паттерн Bridge для переключения между этими сервисами, как я уже показывал на прошлом занятии.

3) Попрактиковаться в потоковой обработке объектов, а также разобраться с назначением интерфейса IEnumerable, но это уже продвинутый уровень. Возможно к следующему разу я вам такой пример подготовлю.

4) Попробовать выполнить опциональную часть с базой. Базу данных можете выбрать на свое усмотрение, как реляционную, так и объектную. Я лучше всего знаком со связкой SQL SErver + Entity Framework. EF можно использовать почти со всеми реляционными базами. Можете попробовать MySQL, MariaDb или тот же SQL Server, но вот от использования Postgres и Oracle SQL советую пока воздержаться. Потом поясню почему, пока просто скажу что с первой все очень неоднозначно, хоть она сейчас и очень распространена, а вторая это не совсем база, это скорее набор инструментов для обеспечения потоков финансовых транзакций, база там это один из инструментов. 

Если хотите попробовать объектную базу, то она также может быть любой, на ваше усмотрение. Я обычно пользуюсь MongoDb т.к. она простая по своей сути и очень мощная, но новичок там может застрять. Сама база устроена просто, а вот документация ее драйвера для .NET написана мутно. Сама MongoDb относится скорее к экосистеме NodeJs, а там все такое, возможно поэтому. В общем подход повествования в документации, не свойственен стеку .NET, но это касается только стандартного драйвера. Есть также надстройки во многом упрощающие работу с ней, например MongoDB.Entities (https://mongodb-entities.com/). Как появится возможность, хочу попробовать эту библиотеку, на каком-нибудь отдельном микросервисе. Раньше я про нее не знал и поэтому работал со стандартным драйвером. В принципе он меня всем устраивает, но для начинающего, мне кажется MongoDB.Entities будет проще в освоении. Правда вопрос о мощности и гибкости API данной библиотеки для меня по прежнему остается открытым. Скорее всего как и EF, под капотом она использует стандартный драйвер, по сути являясь просто оберткой и при желании его можно оттуда вытащить, для получению доступа к стандартному API, если возможностей надстройки вдруг не хватит.